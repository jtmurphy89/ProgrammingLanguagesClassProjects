Name: Jason Murphy
Perm: 5198460

For the extra credit portion of this assignment, I am drawing a Mandelbrot set!! Yay math! Okay, the object which represents the fractal is `Fractals` and the specific function which represents the image is `Fractals.mandelbrot(N)` where N is some natural number. This returns an ImgMask: (c:Point) => Boolean, where ImgMask(c) = true if for all 0 < n <= N the distance of the complex number z_n = z_(n-1)^2 + c (with z_0 = 0 + i0) from the origin is less than or equal to 2 (cf. Wikipedia article on Mandelbrot set); otherwise it returns false. This function uses a couple helper functions `Fractals.zNext(c:Point)(z:Point)`, `Fractals.mandelbrotAccum(c:Point)(z:Point)(accum:Int)(b:Boolean)`. The first function will take the complex numbers c = u+iv, z = x+iy and returns the complex number z^2 + c = (x^2 - y^2 + u) + i(2xy + v), which will be used to compute the next term in the recursively defined sequence above. The second function will check if each term in the sequence with index less than accum is of distance <=2 from the origin, as required, and returns true if so; otherwise it returns false. If you have any questions about my implementations, do feel free to email me! This assignment was a ton of fun!